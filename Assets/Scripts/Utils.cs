//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;


namespace AssemblyCSharp
{
	public static class Utils
	{
		public static bool DeserializeFile<T>(string fileName, ref T objectToLoadDataInto) where T : class {
			if (File.Exists (fileName)) {//first confirm that the navmesh file exists
				using (Stream navmeshStream = File.OpenRead(fileName)){ //File.OpenRead opens the file with the read flag, rather than us having to set it. The using statement ensures that the created stream is cleaned up at the end of the block
					BinaryFormatter formatterForNavMesh = new BinaryFormatter();
					objectToLoadDataInto = ((formatterForNavMesh.Deserialize(navmeshStream) as T));
					return true;
				}
				//return true;
			} else {
				return false;
			}
		}

		public static void SerializeFile<T>(string fileName, ref T objectToLoadDataInto) where T : class {
			using (Stream stream = File.OpenWrite(fileName /*+ "_"+ ((int)(System.DateTime.Now.ToOADate()*1000))*/+ ".qsf") ) //en sure that stream is cleaned up by creating it in a using statement - the stream will be cleaned up at the end of the using block
			{
				//Debug.Log("Serializing tree!");
				BinaryFormatter formatter = new BinaryFormatter();
				formatter.Serialize(stream, objectToLoadDataInto);
			}
		}
	}
}

