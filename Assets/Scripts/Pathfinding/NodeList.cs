//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;


namespace AssemblyCSharp
{
	[Serializable]
	public class NodeListItem<T> where T : class,IComparable<T>
	{
		public NodeListItem<T> previous = null;
		public T value;
		public NodeListItem<T> next = null;
		
		public NodeListItem (T value, NodeListItem<T> prev, NodeListItem<T> next)
		{
			this.value = value;
			this.previous = prev;
			if (previous != null) {
				previous.next = this;
			}
			if (next != null) {
				next.previous = this;
			}
			this.next = next;
		}
	}
	
	//Custom linked list implemenation that automatically sorts inserted nodes
	[Serializable]
	public class NodeList<T> where T : class,IComparable<T>
	{
		NodeListItem<T> head = null;
		NodeListItem<T> tail = null;
		//NodeListItem tail = null;
		int numItems = 0;
		
		public void Add (T value)
		{
			////Debug.Log("Regular insert! "+value.f);
			if (value == null) {
				//////Debug.Log("Tried to add a null node!");
				return;
			}
			if (head == null) {
				//////Debug.Log ("Added head!");
				head = new NodeListItem<T> (value, null, null);
				tail = head;
				++numItems;
			} else {
				NodeListItem<T> temp = head;
				//NodeListItem nodeToInsert = new NodeListItem (value, null, null);
				int InsertionPoint = 0;
				while (temp.next!=null && temp!=tail.next && value.CompareTo(temp.value)>-1) {
					temp = temp.next;
					
					InsertionPoint++;
				}
				//////Debug.Log ("Inserting at "+InsertionPoint+" "+temp.value.f);
				if (value.CompareTo (temp.value) > 0) {
					//////Debug.Log("Insertion case 1");
					/// 
					NodeListItem<T> temp2 = temp.next;
					//if (temp.next==null){
					//	temp2=null;
					//}
					temp.next = new NodeListItem<T> (value, temp, temp2);
					if (temp.next.next != null) {
						temp.next.next.previous = temp.next;
					}
					//if (temp2!=null){
					//	temp2.previous=temp.next;
					//}
					//tail = temp.next;
					++numItems;
				} else {
					//////Debug.Log("Insertion case 2");
					if (temp.previous != null) {
						temp.previous = new NodeListItem<T> (value, temp.previous, temp);
						//temp.previous = temp.previous.next;
						int i = 1;
						//if (temp.previous.next.next!=null){
						//	temp.previous.next.next.previous = temp.previous.next;
						//}
						//if (temp.next!=null){
						//	temp.next.previous=
						//}
						++numItems;
					} else {
						temp.previous = new NodeListItem<T> (value, null, temp);
						if (temp == head) {
							head = head.previous;
						}
						//head = temp.previous;
						++numItems;
					}
				}
				//++numItems;
			}
			if (head.value == null) {
				//////Debug.Log ("The head became null! g");
			} else {
				//////Debug.Log (head.value.f);
			}
		}
		
		public bool ContainsMemberWithLowerCost (T value, int numNodesToCheckInAListBeforeStopping = 50)
		{
			////Debug.Log("Checking for membership! "+value.f);
			NodeListItem<T> temp = head;
			//NodeListItem nodeToInsert = new NodeListItem (value, null, null);
			int numChecked = 0;
			while (temp!=null && (value.CompareTo(temp.value)<0 ) && numChecked<numNodesToCheckInAListBeforeStopping) {
				++numChecked;
				if (temp != null && (temp.value.Equals (value))) {
					////Debug.Log("Found closer value!");
					return true;
				}
				temp = temp.next;
			}
			
			return false;
		}
		
		//		public static void AddToAIfAandBDoNotContainBetterValue<T>(T value, NodeList<T> a, NodeList<T> b) where T: IComparable<T>{
		//			//////Debug.Log("Adding member if cost is lower!");
		//			/// 
		//			throw new NotImplementedException ();
		//			NodeListItem<T> tempA = a.head;
		//			NodeListItem<T> tempB = b.head;
		//			//NodeListItem nodeToInsert = new NodeListItem (value, null, null);
		//			while ((tempA!=null &&  (value.CompareTo(tempA.value)>1 || value.CompareTo(tempB.value)==0)) || (tempB!=null && (value.CompareTo(tempB.value)>1 || !Mathf.Approximately(value.CompareTo(tempA.value)>1)))) {
		//				if (tempA!=null){
		//				if (tempA.value.Equals (value)) {
		//					return;
		//				} else {
		//					tempA = tempA.next;
		//				}
		//				}
		//
		//				if (tempB!=null){
		//				if (tempB.value.Equals (value)) {
		//					return;
		//				} else {
		//					tempB = tempB.next;
		//				}
		//				}
		//
		//			}
		//
		//			while (tempA!=null && (value.CompareTo(tempA.value)>1 || !Mathf.Approximately(value.CompareTo(tempA.value)>1))) {
		//				if (tempA.value.Equals (value)) {
		//					return;
		//				}
		//				tempA = tempA.next;
		//			}
		//			if (tempA != null) {
		//				if (tempA.previous!=null){
		//					tempA.previous.next = new NodeListItem<T>(value,tempA.previous, tempA);
		//					tempA.previous = tempA.previous.next;
		//				} else {
		//					tempA.previous = new NodeListItem<T>(value,null, tempA);
		//				}
		//			} else if (a.tail!=null){
		//				a.tail.next = new NodeListItem<T>(value, a.tail,null);
		//				a.tail = a.tail.next;
		//			}
		//			
		//			//return false;
		//		}
		
		public void Remove (T node)
		{
			//////Debug.Log("Regular remove! "+node.f);
			if (node == null) {
				//////Debug.Log ("Tried to remove a null node!");
				return;
			} else if (node == head.value) {
				//////Debug.Log("Removing head!");
				if (head.next != null) {
					head.next.previous = head.previous;
				}
				head = head.next;
				--numItems;
				return;
			}
			NodeListItem<T> temp = head;
			if (head == null) {
				//////Debug.Log ("The head is null!");
				return;
			} else {
				while (temp!=null && !(temp.value==(node))) {
					temp = temp.next;
				}
				if (temp != null && temp.value == (node)) {
					////Debug.Log("R temp.value.f "+temp.value.f);
					////Debug.Log("R node.f "+node.f);
					--numItems;
					if (temp.previous != null) {
						//if (temp.next!=null){
						temp.previous.next = temp.next;
						//}
					}
					if (temp.next != null) {
						temp.next.previous = temp.previous;
					}
					
					if (temp.next != null) {
						if (temp.previous != null) {
							temp.next.previous = temp.previous;
						} else {
							temp.next.previous = null;
						}
					}
					
				}
			}
			if (head != null) {
				//////Debug.Log ("head.value.f " + head.value.f);
			} else {
				//////Debug.Log ("the head became null! h");
			}
		}
		
		public void Remove<K> (K node)
		{
			if (head == null) {
				//////Debug.Log ("The head is null!");
				return;
			}
			//////Debug.Log("Regular remove! "+node.f);
			if (node == null) {
				//////Debug.Log ("Tried to remove a null node!");
				return;
			} else if (node.Equals(head.value)) {
				//////Debug.Log("Removing head!");
				if (head.next != null) {
					head.next.previous = head.previous;
				}
				head = head.next;
				--numItems;
				return;
			}
			NodeListItem<T> temp = head;
			//else {
			while (temp!=null && !(temp.value.Equals(node))) {
				temp = temp.next;
			}
			if (temp != null && temp.value.Equals(node)) {
				////Debug.Log("R temp.value.f "+temp.value.f);
				////Debug.Log("R node.f "+node.f);
				--numItems;
				if (temp.previous != null) {
					//if (temp.next!=null){
					temp.previous.next = temp.next;
					//}
				}
				if (temp.next != null) {
					temp.next.previous = temp.previous;
				}
				
				if (temp.next != null) {
					if (temp.previous != null) {
						temp.next.previous = temp.previous;
					} else {
						temp.next.previous = null;
					}
				}
				
			}
			//}
			if (head != null) {
				//////Debug.Log ("head.value.f " + head.value.f);
			} else {
				//////Debug.Log ("the head became null! h");
			}
		}
		
		//		public bool TryReplaceWithCloserNode(T node){
		//			//////Debug.Log (head.value.f );
		//			//////Debug.Log (node.f);
		//			//////Debug.Log("Special insert!");
		//			if (node == null) {
		//				//////Debug.Log("Tried to replace a node in list with a null node!");
		//				return false;
		//			}
		//			bool isSuccessor = false;
		//			NodeListItem<T> temp = head;
		//			if (head == null) {
		//				//////Debug.Log ("Head is null! c");
		//				return false;
		//			} else {
		//				NodeListItem<T> nodeToInsertReplacementAt = null;
		//				while (temp!=null && !temp.value.Equals(node)) {
		//
		//					if (node.CompareTo(temp.value)>1) {
		//						nodeToInsertReplacementAt = temp;
		//					}
		//					if (head.value == null) {
		//						//////Debug.Log ("Head is null! e");
		//					}
		//					temp = temp.next;
		//				}
		//				if (temp != null){
		//					if(temp.value.Equals (node) && node.f < temp.value.f) {
		//					isSuccessor = true;
		//					if (nodeToInsertReplacementAt != temp) {
		//						//////Debug.Log ("Adding node at earlier position");
		//						if (temp.next != null) {
		//							temp.next.previous = nodeToInsertReplacementAt;
		//						}
		//						if (temp.previous != null) {
		//							temp.previous.next = nodeToInsertReplacementAt;
		//						}
		//						temp.value.f = node.f;
		//						temp.value.previous = node.previous;
		//						++numItems;
		//					}
		//					--numItems;
		//					//////Debug.Log ("Removing node at later position");
		//					if (temp.previous != null) {
		//						
		//						if (temp.next != null) {
		//							temp.previous.next = temp.next;
		//						} else {
		//							temp.previous.next = null;
		//						}
		//					}
		//					
		//					if (temp.next != null) {
		//						if (temp.previous != null) {
		//							temp.next.previous = temp.previous;
		//						} else {
		//							temp.next.previous = null;
		//						}
		//					}
		//				}
		//			} else {
		//					//////Debug.Log("Temp is null! This means that the end of the list was reached.");
		//					if (head.value==null){
		//						//////Debug.Log ("The head became null! a");
		//					}
		//					if (nodeToInsertReplacementAt!=null){
		//					//////Debug.Log ("Adding node at earlier position a");
		//
		//					if (nodeToInsertReplacementAt.next!=null){
		//							nodeToInsertReplacementAt.next.previous= new NodeListItem<T>(node,nodeToInsertReplacementAt.previous,nodeToInsertReplacementAt);
		//						nodeToInsertReplacementAt.next = nodeToInsertReplacementAt.next.previous;
		//					} else {
		//							nodeToInsertReplacementAt.next= new NodeListItem<T>(node,nodeToInsertReplacementAt,null);
		//					}
		//					++numItems;
		//					} else if (tail!=null){
		//						//////Debug.Log ("Adding node at earlier position b");
		//						
		//						//if (tail.previous!=null){
		//						//	tail.previous.next= new NodeListItem(node,tail.previous,tail);
		//						//	tail.previous = tail.previous.next;
		//						//} else {
		//						tail.next = new NodeListItem<T>(node,tail,null);
		//							tail = tail.next;
		//						//}
		//						++numItems;
		//					}
		//					//////Debug.Log("New list length is "+numItems);
		//					if (head.value==null){
		//						//////Debug.Log ("The head became null! b");
		//					}
		//			}
		//			}
		//
		//			return isSuccessor;
		//		}
		
		public int Count {
			get {
				return numItems;
			}
		}
		
		public T this [int index] {
			get {
				int nodeNum = -1;
				NodeListItem<T> temp = head;
				while (temp!=null && nodeNum!=index) {
					++nodeNum;
					if (nodeNum == index) {
						//						if (tail==null){
						//							//////Debug.Log ("The tail became null! d");
						//						} else {
						//							//////Debug.Log("Tail "+tail.value.f);
						//						}
						return temp.value;
					} else {
						temp = temp.next;
					}
				}
				//				if (tail==null){
				//					//////Debug.Log ("The tail became null! d");
				//				} else {
				//					//////Debug.Log("Tail "+tail.value.f);
				//				}
				if (head == null) {
					//////Debug.Log ("The head became null! d");
				}
				return default(T);
			}
		}
		
		//		public void drawAll (Color col, bool showNeighbours = false)
		//		{
		//			throw new NotImplementedException ();
		//			NodeListItem<T> temp = head;
		//			if (temp == null) {
		//				return;
		//			} else {
		//				while (temp!=null) {
		//					temp.value.triangle.DrawOutline (col, showNeighbours);
		//					temp = temp.next;
		//				}
		//			}
		//		}
		
		public string printAllValues (int limit)
		{
			throw new NotImplementedException ();
			string result = "";
			NodeListItem<T> temp = head;
			int numNodesPrinted = 0;
			if (temp == null) {
				//return;
			} else {
				while (temp!=null && numNodesPrinted<limit) {
					++numNodesPrinted;
					result = result + (temp.previous != null ? temp.previous.value.ToString () + "-" : "-") + temp.value.ToString () + (temp.next != null ? "-" + temp.next.value.ToString () : "-") + ";";
					temp = temp.next;
				}
			}
			result = result + numItems;
			////Debug.Log (result + numItems);
			return result;
		}
		
		public void Clear ()
		{
			head = null;
			tail = null;
			numItems = 0;
		}

		public T[] toArray(){
			T[] result = new T[numItems];
			NodeListItem<T> temp = head;
			for (int i = 0; i<result.Length; ++i) {
				result[i] = temp.value;
				temp = temp.next;
			}
			return result;

		}

		public void AddAll(List<T> list){
			for (int i = 0; i<list.Count; ++i) {
				Add(list[i]);
			}
		}
	}
}

