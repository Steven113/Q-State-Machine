//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

namespace AssemblyCSharp
{
	public class Neuron : EditorDisplay
	{


		//public bool allowInputs = false;
		//public bool allowOutputs = false;
		public int ID = 0; //when creating neuron, it must get a unique ID
		/*need ints referencing neurons by their IDs, so that we can serialize network. Referencing neurons directly leads to circular references that break serialization
		* We store the neurons in a list of lists for the entire network, and search for the neurons with the corresponding IDs
		*/
		public List<int> outputsIDs = new List<int> ();
		public List<int> inputsIDs = new List<int> ();
		public List<float> weights = new List<float> ();
		public float bias = 0f;
		public float summedInput;
		public float transformedInput;
		public ActivationFunctionType activationFunctionType = ActivationFunctionType.SIGMOID;
		/*
		 * We must not serialize the actual neurons links! We must relink them whenever we deserialize
		 */
		[NonSerialized]
		public List<Neuron> outputs = new List<Neuron> ();
		[NonSerialized]
		public List<Neuron> inputs = new List<Neuron> ();



		public Neuron (int ID)
		{
			this.ID = ID;
			//this.allowInputs = allowInputs;
			//this.allowOutputs = allowOutputs;
		}

		public void ToEditorView ()
		{
			EditorGUILayout.LabelField ("Neuron ID " + ID);
			bias = EditorGUILayout.FloatField ("Bias", bias);
			activationFunctionType = (ActivationFunctionType)EditorGUILayout.EnumPopup ("Activation Function Type ", activationFunctionType);
			//if (allowInputs) {
			EditorGUILayout.LabelField ("Input neuron IDs");
			//EditorGUILayout.BeginHorizontal ();
			EditorGUI.indentLevel += 3;
			for (int i = 0; i<inputsIDs.Count; ++i) {
				inputsIDs [i] = EditorGUILayout.IntField ("ID",inputsIDs [i],GUILayout.MinWidth(60));
				weights[i] = EditorGUILayout.FloatField("Weight",weights[i],GUILayout.MinWidth(60));
				if (GUILayout.Button ("Remove", GUILayout.MaxWidth (100))) {
					inputsIDs.RemoveAt (i);
					weights.RemoveAt(i);
					--i;
				}

				if (i>0 && i%3 == 0){
					EditorGUILayout.EndHorizontal ();
					EditorGUILayout.BeginVertical ();
					EditorGUILayout.EndVertical ();
					EditorGUILayout.BeginHorizontal ();
				}
			}

			if (GUILayout.Button ("Add", GUILayout.MaxWidth (100))) {
				inputsIDs.Add (0);
				weights.Add(UnityEngine.Random.value);
			}
			EditorGUI.indentLevel -= 3;
			//EditorGUILayout.EndHorizontal ();
			//EditorGUILayout.BeginVertical ();
			//EditorGUILayout.EndVertical ();
			//}

			//if (allowOutputs) {
			EditorGUILayout.LabelField ("Output neuron IDs");

			//EditorGUILayout.BeginHorizontal ();
			EditorGUI.indentLevel += 3;
			for (int i = 0; i<outputsIDs.Count; ++i) {
				outputsIDs [i] = EditorGUILayout.IntField (outputsIDs [i],GUILayout.MinWidth(60));
				if (GUILayout.Button ("Remove", GUILayout.MaxWidth (100))) {
					outputsIDs.RemoveAt (i);
					--i;
				}

				if (i>0 && i%3 == 0){
					EditorGUILayout.EndHorizontal ();
					EditorGUILayout.BeginVertical ();
					EditorGUILayout.EndVertical ();
					EditorGUILayout.BeginHorizontal ();
				}
			}
				
			if (GUILayout.Button ("Add", GUILayout.MaxWidth (100))) {
				outputsIDs.Add (0);
			}
			EditorGUI.indentLevel -= 3;
			//EditorGUILayout.EndHorizontal ();
			//EditorGUILayout.BeginVertical ();
			//EditorGUILayout.EndVertical ();
			//}
		}
	}
}

