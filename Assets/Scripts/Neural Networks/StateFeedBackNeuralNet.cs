//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using System.Runtime.Serialization;


namespace AssemblyCSharp
{
	[Serializable]
	public class StateFeedBackNeuralNet : EditorDisplay,IDeserializationCallback
	{
		int neuronID = 0;
		public List<List<Neuron>> neuronsByLayer = new List<List<Neuron>>(); //first list is inputs, last is outputs
		[NonSerialized] List<Vector2> scrollPosByLayer = new List<Vector2>();
		int numStateCopiesToStore = 10;
		public List<Neuron> stateNeurons = new List<Neuron>();
		public List<Neuron> actionNeurons = new List<Neuron>();
		[NonSerialized]Vector2 stateScrollPos = Vector2.zero;
		[NonSerialized]Vector2 actionScrollPos = Vector2.zero;

		[NonSerialized]Vector2 scrollPos;

		public StateFeedBackNeuralNet(int numInputs, int numHiddenLayers, int numOutputs){
			neuronsByLayer.Add (new List<Neuron> (numInputs));
			for (int i = 0; i<numInputs; ++i) {
				neuronsByLayer [0].Add (new Neuron (++neuronID)); //add input neurons
			}
			scrollPosByLayer.Add (Vector2.zero);
			int numNeuronsForEachHiddenLayer = (int)((numInputs + numOutputs) * 0.5f);
			for (int i = 0; i<numHiddenLayers; ++i) {
				neuronsByLayer.Add (new List<Neuron> (numNeuronsForEachHiddenLayer));
				scrollPosByLayer.Add (Vector2.zero);
			}

			neuronsByLayer [neuronsByLayer.Count - 1].Add (new Neuron (++neuronID)); // add a single hidden layer neuron

			neuronsByLayer.Add (new List<Neuron> (numOutputs));
			scrollPosByLayer.Add (Vector2.zero);
			for (int i = 0; i<numOutputs; ++i) {
				neuronsByLayer[neuronsByLayer.Count-1].Add(new Neuron(++neuronID)); //add output neurons
			}
		}

		public void GenerateConnectedNetwork(){
			//neuronsByLayer [0].AddRange (stateNeurons);
			neuronsByLayer [0].AddRange (actionNeurons);
		}

		public void ToEditorView (){

			EditorGUILayout.LabelField ("How many copies of previous state to keep");
			numStateCopiesToStore = EditorGUILayout.IntField (numStateCopiesToStore);

			float spaceToCreate = 0;

			for (int i = 0; i<stateNeurons.Count; ++i) {
				spaceToCreate+=240;
				spaceToCreate+=stateNeurons[i].outputsIDs.Count*15f;
				spaceToCreate+=stateNeurons[i].inputsIDs.Count*15f;
			}

			for (int i = 0; i<actionNeurons.Count; ++i) {
				spaceToCreate+=240;
				spaceToCreate+=actionNeurons[i].outputsIDs.Count*15f;
				spaceToCreate+=actionNeurons[i].inputsIDs.Count*15f;
			}

			for (int i = 0; i<neuronsByLayer.Count; ++i) {
				for (int j = 0; j<neuronsByLayer[i].Count; ++j){
					spaceToCreate+=240;
					spaceToCreate+=neuronsByLayer[i][j].outputsIDs.Count*15f;
					spaceToCreate+=neuronsByLayer[i][j].inputsIDs.Count*15f;
				}
			}

			scrollPos = EditorGUILayout.BeginScrollView(scrollPos,GUILayout.Width(1000),GUILayout.Height(spaceToCreate));

			ShowNeuronList (ref stateNeurons, ref stateScrollPos, "State Neurons",  "Remove state neuron", "Add state neuron");
			ShowNeuronList (ref actionNeurons, ref actionScrollPos, "Action Neurons", "Remove action neuron", "Add action neuron");



			for (int i = 0; i<neuronsByLayer.Count; ++i) {
				List<Neuron> temp = neuronsByLayer[i];
				Vector2 tempS = scrollPosByLayer[i];
				if (i ==0){
					ShowNeuronList(ref temp, ref tempS,"Input layer", "Remove input neuron", "Add input neuron");
				} else if (i == (neuronsByLayer.Count-1)){
					ShowNeuronList(ref temp, ref tempS,"Output layer", "Remove output neuron", "Add output neuron");
				} else {
					ShowNeuronList(ref temp, ref tempS,"Hidden layer "+(i), "Remove hidden neuron", "Add hidden neuron");
				}
				neuronsByLayer[i] = temp;
				scrollPosByLayer[i] = tempS;
			}

			EditorGUILayout.EndScrollView();
		}

		public void ShowNeuronList(ref List<Neuron> list, ref Vector2 scrollPos, string label, string removeActionString, string addActionString){
			EditorGUI.indentLevel+=3;
			//EditorGUILayout.EndVertical();
			EditorGUILayout.LabelField(label);

			//EditorGUILayout.BeginHorizontal();
			for (int j = 0; j<list.Count; ++j){
				list[j].ToEditorView();
				if (GUILayout.Button (removeActionString, GUILayout.MaxWidth(200))){
					list.RemoveAt(j);
					//scrollPosByLayer.RemoveAt(j);
					--j;
				}
			}
			
			if (GUILayout.Button (addActionString, GUILayout.MaxWidth(200))){
				list.Add(new Neuron(++neuronID));
				while (scrollPosByLayer.Count<neuronsByLayer.Count){
					scrollPosByLayer.Add(Vector2.zero);
				}
			}
			//EditorGUILayout.EndHorizontal();

			
			//EditorGUILayout.BeginVertical();
			
			EditorGUI.indentLevel-=3;
		}

//		public void OnBeforeSerialize(){
//
//		}

		void IDeserializationCallback.OnDeserialization(System.Object sender){
			//Debug.Log ("Callback");
			stateScrollPos = Vector2.zero;
			actionScrollPos = Vector2.zero;
			scrollPos = Vector2.zero;
			scrollPosByLayer = new List<Vector2> (neuronsByLayer.Count);
			for (int i = 0; i<neuronsByLayer.Count; ++i) {
				scrollPosByLayer.Add(Vector2.zero);
			}
 		}
	}
}

