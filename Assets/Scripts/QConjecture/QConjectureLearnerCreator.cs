//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEditor;
using UnityEngine;
using System.Collections.Generic;


namespace AssemblyCSharp
{
	public class QConjectureLearnerCreator : EditorWindow
	{
		string fileToLoadTreeFrom = "default_q_File";
		string fileToSaveTreeTo = "default_q_File_sv";
		float learningRate = 0.1f;
		float discountFactor = 0.3f;
		QConjectureLearner conjectureLearner = null;

		int numStates = 0;
		int numActions = 0;

		List<string> statesList = new List<string>();
		List<string> actionList = new List<string>();
		bool preserveStateList = false;
		bool preserveActionList = false;
		Vector2 scrollPos = Vector2.zero;

		[MenuItem("Window/Create Q-Conjecture Learner")]
		
		public static void ShowWindow()
		{
			EditorWindow.GetWindow(typeof(QConjectureLearnerCreator));
		}
		
		public void OnGUI(){
			
			fileToSaveTreeTo = EditorGUILayout.TextField ("Save: Conjecture Learner File Location", fileToSaveTreeTo);
			
			if (GUILayout.Button ("Save Conjecture Learner")) {
				if (conjectureLearner != null) {
					Utils.SerializeFile (fileToSaveTreeTo, ref conjectureLearner);
					String saveData = "";
					for (int i = 0; i<conjectureLearner.possibleStates.Count; ++i){
						saveData = saveData + conjectureLearner.possibleStates[i] + " ";
					}
					saveData += Environment.NewLine;
					for (int i = 0; i<conjectureLearner.possibleActions.Count; ++i){
						saveData = saveData + conjectureLearner.possibleActions[i] + " ";
					}
					System.IO.File.WriteAllText(fileToSaveTreeTo+"State-Action-Info", saveData);
				} else {
					Debug.Log ("Conjecture Learner is null!");
				}
			}
			
			fileToLoadTreeFrom = EditorGUILayout.TextField ("Load: Conjecture Learner File Location", fileToLoadTreeFrom);
			
			if (GUILayout.Button ("Load Conjecture Learner")) {
				QConjectureLearner tempCL = null;
				if (Utils.DeserializeFile<QConjectureLearner> (fileToLoadTreeFrom, ref tempCL) && tempCL != null) {
					conjectureLearner = tempCL;
				} else {
					Debug.Log ("File could not load!");
				}
			}

			scrollPos = EditorGUILayout.BeginScrollView (scrollPos);

			learningRate = EditorGUILayout.FloatField ("Learning Rate", learningRate);
			EditorGUILayout.LabelField ("The learning rate determines how much weight a new reward has over the previous reward");
			discountFactor = EditorGUILayout.FloatField ("Discount Factor", discountFactor);
			EditorGUILayout.LabelField ("The discount factor determines how much we weight the utility of the successor state s' when calculating the utility of state s");

			preserveStateList = EditorGUILayout.Toggle ("Preserve state strings even when reducing number of state strings?",preserveStateList);
			numStates = EditorGUILayout.IntField ("Number of States",numStates);
			if (numStates > statesList.Count) {
				while (statesList.Count<=numStates) {
					statesList.Add ("");
				}
			} else if (statesList.Count>numStates && !preserveStateList){
				while (statesList.Count>numStates) {
					statesList.RemoveAt (statesList.Count-1);
				}
			}
			EditorGUI.indentLevel += 5;
			for (int i = 0; i<numStates; ++i) {
				statesList[i] = EditorGUILayout.TextField(i+"",statesList[i]);
			}
			EditorGUI.indentLevel -= 5;

			preserveActionList = EditorGUILayout.Toggle ("Preserve state strings even when reducing number of state strings?",preserveActionList);
			numActions = EditorGUILayout.IntField ("Number of Actions",numActions);
			if (numActions > actionList.Count) {
				while (actionList.Count<=numActions) {
					actionList.Add ("");
				}
			} else if (actionList.Count>numActions && !preserveActionList){
				while (actionList.Count>numActions) {
					actionList.RemoveAt (actionList.Count-1);
				}
			}
			EditorGUI.indentLevel += 5;
			for (int i = 0; i<numActions; ++i) {
				actionList[i] = EditorGUILayout.TextField(i+"",actionList[i]);
			}
			EditorGUI.indentLevel -= 5;

			EditorGUILayout.EndScrollView ();

			if (GUILayout.Button("Generate Conjecture Learner")){

				conjectureLearner = new QConjectureLearner(statesList.GetRange(0,numStates),actionList.GetRange(0,numActions),learningRate,discountFactor);
				//qTree.SetParents();
				//++heirarchyDepth;
				//heirarchy.Insert(0, new List<string>());
			}
			//conjectureLearner = null;
			if (conjectureLearner != null) {
				conjectureLearner.ToEditorView();
			}
		}

		void OnFocus(){
			conjectureLearner = null;
		}
	}
}

