//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.ObjectModel;
using Gameplay;


namespace AI
{
	[Serializable]
	public class SoldierEntity
	{
		public Collider mainLOSCollider; //collider used to trivially reject a soldier as being invisible
		//public Collider[] CollidersForOtherSoldiersToCheckFor; //Colliders used to detect if this soldier is visible
		public Transform [] LOSCheckTransforms;//Transforms to raycast towards to check LOS
		public Collider[] LOSCheckColliders; //if a soldier's colliders don't overlap with any of these colliders, it is culled from raycast checks.
		public FactionName faction = FactionName.QHeirarchyArmy;
		public Collection<SoldierIntel> knownPositionsOfOtherSoldiers = new Collection<SoldierIntel> ();
		public Quaternion facingRotation = Quaternion.identity;
		public Transform centreOfMass;
		public bool isNeutral = false;
		public bool isAlive = true;
		public float amountOfSoundProduced = 0;
		public float amountOfTimeSpentOutsidePlayArea = 0f;
		public ControlHealth controlHealth;
		public float agentRadius = 0.5f;
		public int ID = 0;
		public static int IDGranted = 0;

		public SoldierEntity(/*Collider[] CollidersForOtherSoldiersToCheckFor,*/ Transform [] LOSCheckTransforms,Collider[] LOSCheckColliders,FactionName faction, CharacterController mainLOSCollider, Transform centreOfMass){
			//this.CollidersForOtherSoldiersToCheckFor = CollidersForOtherSoldiersToCheckFor;
			this.LOSCheckTransforms = LOSCheckTransforms;
			this.LOSCheckColliders = LOSCheckColliders;
			this.faction = faction;
			this.mainLOSCollider = mainLOSCollider;
			this.centreOfMass = centreOfMass;
		}

		public bool IsNeutral {
			get {
				return isNeutral;
			}
			set {
				isNeutral = value;
			}
		}

		~SoldierEntity(){
			//GameData.RemoveSoldier (this);
		}
	}
}

