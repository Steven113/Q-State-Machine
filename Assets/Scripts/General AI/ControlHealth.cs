//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;


namespace AssemblyCSharp
{
	public class ControlHealth : MonoBehaviour
	{
		public float health;
		public float maxhealth;
		public bool canBeHealed;
		public bool canBeDamaged;
		public bool destroyOnDeath;
		public AudioClip [] audioClipsToPlayOnDeath;
		public ControlHealth parent; //if the controlhealth script has a parent, when it is damaged its parent will recieve weighting*the damage it recieved. allows for simulation of damage to limbs etc
		public float weighting; //%of damage done to this obejct that the parents will recieve
        public bool isOrganic = false; //should projectiles play impact sounds when hitting a object with this script attached?
        public List<ControlHealth> children = new List<ControlHealth> ();
		public float lastSuppressionTime = - 0.1f;
		public float suppressionLevel = 0;
        /*
         * This method damages a object, then it's parents. If the health is <=0 and the object should be destroyed when it dies (runs out of health) it is destroyed and a random death sound is played
        */
        public virtual bool damage(float amount, FactionName factionThatFiredShot = FactionName.NONE, 
            Vector3 shotDirection = default(Vector3)){

			if (canBeDamaged){
				health -= amount;
				if (parent!=null){
					parent.damage(amount,factionThatFiredShot,shotDirection);
				}
			}
           
            if (health <= 0 && destroyOnDeath) {
				GameObject.Destroy(gameObject);
				if (audioClipsToPlayOnDeath!=null && audioClipsToPlayOnDeath.Length>0){
					AudioSource.PlayClipAtPoint(audioClipsToPlayOnDeath[(int)UnityEngine.Random.Range(0,
                        audioClipsToPlayOnDeath.Length-1)],gameObject.transform.position);
				}
				return false;
			}
			return true;
		}

       
        //heal this ControlHealth instance and it's children by amount
        public void heal(float amount){
			health = (amount + health) > maxhealth ? maxhealth : (amount + health);
			for (int i = 0; i<children.Count; ++i) {
				children[i].heal(amount);
			}
		}
        //used by AI, so that intelligent entities can respond to near misses. Needs empty body since we can't make method abstract
        public virtual void suppress(float damage, FactionName factionThatFiredShot = FactionName.NONE, Vector3 shotDirection = default(Vector3)){
			float timeRatio = 1f / (1f + Time.time - lastSuppressionTime); //must add one to ensure that ratio is <=1
			suppressionLevel = (1f - timeRatio) * (damage/maxhealth) + timeRatio * suppressionLevel;
			lastSuppressionTime = Time.time;
		}

        //when destroyed ensure that parent ControlHealth instances no longer store reference to this, to avoid NullReferenceExceptions
        public virtual void Destroy(){
			if (parent != null) {
				parent.children.Remove(this);
			}
		}


       
	}
}

