//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.ObjectModel;

//wrapper class for a collection of soldier entities
using UnityEngine;
using System.Collections.Generic;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;
using XnaGeometry;

namespace AssemblyCSharp
{
	[Serializable]
	public class Faction
	{
		FactionName factionName = FactionName.QHeirarchyArmy;
		List<SoldierEntity> soldiers = new List<SoldierEntity>();
		List<SoldierIntel> soldierIntelData = new List<SoldierIntel>();


		//public List<SoldierEntity> entitiesFireTeamMembersCanSee = new List<SoldierEntity>();
		
		int numAssigns = 0;
		
		int numSoldiersToAssignToATask = 2;

		public Faction(FactionName factionName = FactionName.QHeirarchyArmy){
			this.factionName = factionName;
		}

		public FactionName FactionName {
			get {
				return factionName;
			}
			set {
				factionName = value;
			}
		}

		public List<SoldierEntity> Soldiers {
			get {
				return soldiers;
			}
			set {
				soldiers = value;
			}
		}

		public List<SoldierIntel> SoldierIntelData {
			get {
				return soldierIntelData;
			}
//			set {
//				soldierIntelData = value;
//			}
		}

		//returns true if intel on the soldier exists
//		public bool updateSoldierIntel(SoldierEntity entity, Vector3 pos){
//			for (int i = 0; i < soldierIntelData.Count; i++) {
//				if (soldierIntelData[i].soldierEntityToTrack==entity){
//					if (soldierIntelData[i].lastKnownPosition==Vector3.zero){
//						soldierIntelData[i].averageVelocity = soldierIntelData[i].soldierEntityToTrack.facingRotation*Vector3.forward*FireTeamController.soldierInterpolationSpeed;
//					} else {
//						soldierIntelData[i].averageVelocity = ((1- (1/((Time.time>0?Time.time:1)-soldierIntelData[i].TimeWhenIntelWasLastUpdated)))*(pos-soldierIntelData[i].lastKnownPosition)/((Time.time>0?Time.time:1)-soldierIntelData[i].TimeWhenIntelWasLastUpdated) + (1/((Time.time>0?Time.time:1)-soldierIntelData[i].TimeWhenIntelWasLastUpdated)*soldierIntelData[i].averageVelocity)); //we use a exponential weighted moving avg here.
//					}
//					soldierIntelData[i].lastKnownPosition = pos;
//					soldierIntelData[i].TimeWhenIntelWasLastUpdated = Time.time;
//					return true;
//				}
//			}
//			return false;
//		}

		public SoldierIntel getSoldierIntel(SoldierEntity entity){
			Debug.Assert (entity.faction != factionName);
			for (int i = 0; i < soldierIntelData.Count; i++) {
				if (soldierIntelData[i].soldierEntityToTrack==entity){
					return soldierIntelData[i];
				}
			}
			soldierIntelData.Add (new SoldierIntel (entity));
			return soldierIntelData [soldierIntelData.Count - 1];
		}

		public bool factionHasSoldier(SoldierEntity entity){
			for (int i = 0; i < soldiers.Count; i++) {
				if (soldiers[i]==entity){
					return true;
				}
			}
			return false;
		}
		
//		public void RequestTarget(AIEntity teamMember){
//			if (entitiesFireTeamMembersCanSee.Count != 0) {
//				++numAssigns;
//				teamMember.CurrentTarget = entitiesFireTeamMembersCanSee [0];
//				teamMember.amountOfTimeCurrentTargetHasBeenInLOS = 0;
//				if ((numAssigns % numSoldiersToAssignToATask == 0)) {
//					entitiesFireTeamMembersCanSee.Add (entitiesFireTeamMembersCanSee [0]);
//					entitiesFireTeamMembersCanSee.RemoveAt (0);
//					
//				} 
//			} else {
//				teamMember.CurrentTarget = null;
//			}
//		}

//		public void loadVisibleEntities(List<SoldierEntity> entities){
//			for (int i = 0; i<entities.Count; ++i){
//				if (!entitiesFireTeamMembersCanSee.Contains(entities[i])){
//					entitiesFireTeamMembersCanSee.Add(entities[i]);
//				}
//			}
//		}
		
//		public void removeVisibleEntities(List<SoldierEntity> entities){
//			for (int i = 0; i<entities.Count; ++i){
//				if (entitiesFireTeamMembersCanSee.Contains(entities[i])){
//					entitiesFireTeamMembersCanSee.Remove(entities[i]);
//				}
//			}
//			
//			
//		}
		
	}
}

